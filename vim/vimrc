" pathogen
execute pathogen#infect()
syntax on

if has('autocmd')
  filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" screw vi
set nocompatible

" tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set encoding=utf-8

set scrolloff=3

" Store temporary files in a central spot
" The double slash at the end ensures that the filename is created with the entire path so that name collision doesn't happen
set backupdir=~/.vim-tmp/bckp//,/tmp//
set directory=~/.vim-tmp/swap//,/tmp//

set autoindent
set autoread
set showmode
set showcmd
set hidden
set history=10000
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2

" relative line numbers. Bloody awesome!
set relativenumber

set undodir=~/.vim-tmp/undo//,/tmp//
" undo-ing even after saving
set undofile

" tab completion
set wildmenu
set wildmode=list:longest,full
set ignorecase
set smartcase
" ---instead of :%s/foo/bar/g use :%s/foo/bar/---
set gdefault	
set incsearch
set showmatch
set hlsearch

" 80th column is colored to show you are going too long
set colorcolumn=80

" make the current window big, but leave others small
set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if we set winheight to be huge before winminheight, the winminheight set will fail.
set winheight=5
set winminheight=5
set winheight=999

" .bashrc loaded on vim startup. All aliases will now work within vim
set shellcmdflag=-ic
set shell=bash

" colorscheme
set background=dark
colorscheme molokai

" Adding 6 more years to your life
nnoremap ; :
nnoremap : ;

" mapping CAPS for moving around splits (instead of <C-w> ---
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" first 2 lines fixes Vim's screwed up regex search behaviour it seems
nnoremap / /\v
vnoremap / /\v

" bubble selection
" moving lines up and down by simply selecting the text and pressing control+arrow key
" Bubble Single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble Multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" What's this?! https://www.reddit.com/r/vim/comments/1vdrxg/space_is_a_big_key_what_do_you_map_it_to/
nmap <Space> \
nmap <Space><Space> \\

" Edit files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nnoremap <leader>e :edit <C-R>=expand('%:h').'/'<cr>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cnoremap w!! w !sudo tee > /dev/null %

" place the next search in the middle of the screen
nnoremap N Nzz
nnoremap n nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" clear the search buffer when hitting return
nnoremap <cr> :noh<cr>
" map control-backspace to delete the previous word
imap <C-BS> <C-W>

" To save, 'ctrl+s' and the new favorite 'ctrl+space'
nmap <C-s> ;w<CR><CR>
" saving and then go to normal mode. This way it is easier to quit
imap <C-s> <Esc>;w<CR><CR>
"
nmap <C-Space> ;w<CR><CR>
imap <C-Space> <Esc>;w<CR><CR>

" rename current file with <leader>R
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
nnoremap <leader>R :call RenameFile()<cr>

" <leader>a -> Ack Or SilverSearch or whatever
let g:ackprg = 'ag --nogroup --nocolor --column'
nnoremap <leader>a :Ag

" CtrlP for fuzzy file search
" <leader>f -> Search file in whole project
nnoremap <leader>f :CtrlP<cr>
" <leader>F -> Search only in the directory of the current file
nnoremap <leader>F :CtrlPCurFile<cr>
" <leader>b -> Search files that are already in the buffer
nnoremap <leader>b :CtrlPBuffer<cr>
let g:ctrlp_working_path_mode = 'ra'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows
set wildignore+=*/out/**
set wildignore+=*/vendor/**
let g:ctrlp_custom_ignore = {
 \ 'dir':  '\v[\/]\.(git|hg|svn)$',
 \ 'file': '\v\.(exe|so|dll)$',
 \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
 \ }

" <leader>v -> reselect the text that was just pasted so I can perform commands (like indentation) on it
nnoremap <leader>V `[v`]

" <leader>v -> :vs. Creates vertical split of the current buffer
nnoremap <leader>v :vs<cr>
" <leader>h -> :sp. Creates horizontal split of the current buffer
nnoremap <leader>h :sp<cr>

" <leader><leader> -> Switch between last two files
nnoremap <leader><leader> <c-^>

" <leader>E -> show directory listing
nnoremap <leader>w :e.<cr>

" <leader>x -> maximize current window
nnoremap <leader>x <C-W>_<C-W><Bar>

" <leader>l -> select all
nnoremap <leader>l ggVG
" ,c -> Copy selected text to system clipboard
vmap ,c "+y
" ,p -> Pasted from system clipboard
nnoremap ,p "+gP

" <leader>t -> New Tab!
nnoremap <leader>t :tabnew<cr>

" <leader>B -> delete all but the open buffer
nnoremap <leader>B :BufOnly<cr>
" <leader>d -> equivalent to :bd. Better than :q
nnoremap <leader>d :bd<cr>
nnoremap <Leader>q :q<CR>
" ------------------------------------------------------------------------------
" --- uncommented out elsewhere ---
" --- <leader>c<space> -> toggle comment ---
" --- <leader>y -> close the current buffer without closing the window
"  (bclose.vim) ---
" --- <leader>R - rename the current file ---
" --- <leader>e -> edit files in the same directory as current directory ---
" --- <leader>b -> bring up the commant-T buffer window ---
